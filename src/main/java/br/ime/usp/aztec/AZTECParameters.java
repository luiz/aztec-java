/*
Copyright 2012 Luiz Fernando Oliveira Corte Real

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package br.ime.usp.aztec;

import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import br.ime.usp.aztec.io.EncodingOutput;
import br.ime.usp.aztec.io.SignalParser;
import br.ime.usp.aztec.io.WriterEncodingOutput;

/**
 * Container for AZTEC algorithm parameters. Must be created with the Builder
 * class inside it.
 * 
 * @author Luiz Fernando Oliveira Corte Real
 * @see AZTECCommandLineParametersParser
 */
public final class AZTECParameters {

	/**
	 * Default value for the parameter T of the algorithm, in samples
	 */
	public static final double DEFAULT_T = 4;

	/**
	 * Default value for the parameter N of the algorithm, in samples
	 */
	public static final double DEFAULT_N = 25;

	private double t;
	private double k;
	private double n;
	private Iterable<Double> input;
	private EncodingOutput output;
	private boolean decoding = false;

	private AZTECParameters() {
	}

	/**
	 * @return Minimum size of line to not be considered part of slope
	 */
	public double getT() {
		return this.t;
	}

	/**
	 * @return Maximum variation of voltage to be considered a line
	 */
	public double getK() {
		return this.k;
	}

	/**
	 * @return Maximum length of a line
	 */
	public double getN() {
		return this.n;
	}

	/**
	 * @return Iterable with input signal values
	 */
	public Iterable<Double> getInput() {
		return this.input;
	}

	/**
	 * @return Algorithm output
	 */
	public EncodingOutput getOutput() {
		return this.output;
	}

	/**
	 * @return true, if the user wants to decode instead of encode
	 */
	public boolean isDecoding() {
		return this.decoding;
	}

	/**
	 * Builder for {@link AZTECParameters}
	 * 
	 * @author Luiz Fernando Oliveira Corte Real
	 */
	public static final class Builder {
		private final AZTECParameters params = new AZTECParameters();

		/**
		 * @param variation
		 *            The maximum variation in input signal accepted by the
		 *            algorithm when approximating it by a line.
		 * @return A builder for the optional parameters. They will be already
		 *         configured with default values.
		 */
		public OptionalParametersBuilder withMaximumAcceptableVariation(
				double variation) {
			this.params.k = variation;
			this.params.n = DEFAULT_N;
			this.params.t = DEFAULT_T;
			this.params.input = new SignalParser(new InputStreamReader(
					System.in));
			this.params.output = new WriterEncodingOutput(
					new OutputStreamWriter(System.out));
			return new OptionalParametersBuilder(this.params);
		}
	}

	public static final class OptionalParametersBuilder {
		private final AZTECParameters params;

		private OptionalParametersBuilder(AZTECParameters params) {
			this.params = params;
		}

		/**
		 * @param size
		 *            The maximum size of a line to be considered part of a
		 *            slope
		 * @return The builder
		 * @see AZTECParameters#getT()
		 */
		public OptionalParametersBuilder withMaximumSlopeLineSize(double size) {
			this.params.t = size;
			return this;
		}

		/**
		 * @param length
		 *            The maximum length of a line generated by the algorithm.
		 * @return The builder
		 * @see AZTECParameters#getN()
		 */
		public OptionalParametersBuilder withMaximumLineLength(double length) {
			this.params.n = length;
			return this;
		}

		/**
		 * @param input
		 *            A signal
		 * @return The builder
		 * @see AZTECParameters#getInput()
		 */
		public OptionalParametersBuilder withInput(Iterable<Double> input) {
			this.params.input = input;
			return this;
		}

		/**
		 * @param output
		 *            A processor of the algorithm output
		 * @return The builder
		 * @see AZTECParameters#getOutput()
		 */
		public OptionalParametersBuilder withOutput(EncodingOutput output) {
			this.params.output = output;
			return this;
		}

		/**
		 * Decode instead of encode
		 * 
		 * @return the builder
		 */
		public OptionalParametersBuilder decoding() {
			this.params.decoding = true;
			return this;
		}

		/**
		 * Call this method when you have finished the configuration of the
		 * parameters
		 * 
		 * @return A configured {@link AZTECParameters}
		 */
		public AZTECParameters build() {
			return this.params;
		}
	}
}
