/*
Copyright 2012 Luiz Fernando Oliveira Corte Real

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package br.ime.usp.aztec;

import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;

/**
 * Container for AZTEC algorithm parameters that can be created from inside the
 * program. Must be created with the Builder class inside it.
 *
 * @author Luiz Fernando Oliveira Corte Real
 * @see {@link CommandLineAlgorithmParameters}
 */
public final class ProgrammaticAlgorithmParameters implements
		AlgorithmParameters {

	private double t;
	private double k;
	private double n;
	private Reader input;
	private Writer output;

	private ProgrammaticAlgorithmParameters() {
	}

	public double getT() {
		return t;
	}

	public double getK() {
		return k;
	}

	public double getN() {
		return n;
	}

	public Reader getInput() {
		return input;
	}

	public Writer getOutput() {
		return output;
	}

	/**
	 * Builder for {@link ProgrammaticAlgorithmParameters}
	 *
	 * @author Luiz Fernando Oliveira Corte Real
	 */
	public static final class Builder {
		private final ProgrammaticAlgorithmParameters params = new ProgrammaticAlgorithmParameters();

		/**
		 * @param variation
		 *            The maximum variation in input signal accepted by the
		 *            algorithm when approximating it by a line.
		 * @return A builder for the optional parameters. They will be already
		 *         configured with default values.
		 */
		public OptionalParametersBuilder withMaximumAcceptableVariation(
				double variation) {
			this.params.k = variation;
			this.params.n = DEFAULT_N;
			this.params.t = DEFAULT_T;
			this.params.input = new InputStreamReader(System.in);
			this.params.output = new OutputStreamWriter(System.out);
			return new OptionalParametersBuilder(params);
		}
	}

	public static final class OptionalParametersBuilder {
		private final ProgrammaticAlgorithmParameters params;

		private OptionalParametersBuilder(ProgrammaticAlgorithmParameters params) {
			this.params = params;
		}

		/**
		 * @param size
		 *            The maximum size of a line to be considered part of a
		 *            slope
		 * @return The builder
		 * @see {@link AlgorithmParameters#getT()}
		 */
		public OptionalParametersBuilder withMaximumSlopeLineSize(double size) {
			this.params.t = size;
			return this;
		}

		/**
		 * @param size
		 *            The maximum size of a line generated by the algorithm.
		 * @return The builder
		 * @see {@link AlgorithmParameters#getN()}
		 */
		public OptionalParametersBuilder withMaximumLineLength(double length) {
			this.params.n = length;
			return this;
		}

		/**
		 * @param input
		 *            A reader for the input signal
		 * @return The builder
		 * @see {@link AlgorithmParameters#getInput()}
		 */
		public OptionalParametersBuilder withInput(Reader input) {
			this.params.input = input;
			return this;
		}

		/**
		 * @param output
		 *            A writer to where the result of the algorithm should be
		 *            written
		 * @return The builder
		 * @see {@link AlgorithmParameters#getOutput()}
		 */
		public OptionalParametersBuilder withOutput(Writer output) {
			this.params.output = output;
			return this;
		}

		/**
		 * Call this method when you have finished the configuration of the
		 * parameters
		 *
		 * @return A configured {@link ProgrammaticAlgorithmParameters}
		 */
		public ProgrammaticAlgorithmParameters build() {
			return this.params;
		}
	}
}
